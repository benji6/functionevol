var Ghost = require('../js/lib/Ghost/Ghost.js');
var getRandomBaseFunctions = require('../js/lib/baseFunctions/getRandomBaseFunctions.js');

describe("Ghost", function () {
  it("returns an object when called", function () {
    expect(Ghost(1, 8)).toEqual(jasmine.any(Object));
  });
  describe("ghost: generated by Ghost with arity 1 and length 8", function () {
    var ghost;
    beforeEach(function() {
      ghost = Ghost(1, 8);
    });
    it("has a chromosomes property which is an array", function () {
      expect(ghost.chromosomes).toEqual(jasmine.any(Array));
    });
    it("has a chromosomes property which is an array of length 2", function () {
      expect(ghost.chromosomes.length).toEqual(2);
    });
    it("has chromosomes[0].length = 8", function () {
      expect(ghost.chromosomes[0].length).toEqual(8);
    });
    it("has chromosomes[1].length = 8", function () {
      expect(ghost.chromosomes[1].length).toEqual(8);
    });
  });
});

describe("getRandomBaseFunctions", function () {
  it("returns an object when called", function () {
    expect(getRandomBaseFunctions()).toEqual(jasmine.any(Object));
  });
  describe("getRandomBaseFunctions(2, 8)", function () {
    var result;
    beforeEach(function() {
      result = getRandomBaseFunctions(2, 8);
    });
    it("returns fns array", function () {
      expect(result.fns).toEqual(jasmine.any(Array));
    });
    it("returns fns array of length 8", function () {
      expect(result.fns.length).toEqual(8);
    });
    it("returns names array", function () {
      expect(result.names).toEqual(jasmine.any(Array));
    });
    it("returns names array of length 8", function () {
      expect(result.names.length).toEqual(8);
    });
  });
});
